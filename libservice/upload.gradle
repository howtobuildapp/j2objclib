apply plugin: 'maven'
apply plugin: 'signing'

signing {
    sign configurations.archives
}

def group = 'com.github.howtobuildapp'
def artifact = 'libservice'
def type = 'jar'
def snapshoturl = 'https://oss.sonatype.org/content/repositories/snapshots'
def stagingurl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'

def ver = '1.0.0'

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }
            repository(url: stagingurl, id: 'oss') {
                authentication(userName: OSS_USERNAME, password: OSS_PASSWORD)
            }
            snapshotRepository(url: snapshoturl, id: 'oss') {
                authentication(userName: OSS_USERNAME, password: OSS_PASSWORD)
            }
            pom.project {
                name 'j2objclib-libservice'
                version ver
                artifactId artifact
                groupId group
                packaging type
                description 'lib service'
                url 'https://github.com/howtobuildapp/j2objclib'

                scm {
                    connection 'scm:git:https://github.com/howtobuildapp/j2objclib.git'
                    developerConnection 'scm:git:https://github.com/howtobuildapp/j2objclib.git'
                    url 'https://github.com/howtobuildapp/j2objclib.git'
                }

                licenses {
                    license {
                        name 'BSD 2-Clause "Simplified" License'
                        url 'https://github.com/howtobuildapp/j2objclib/blob/master/LICENSE'
                    }
                }

                developers {
                    developer {
                        name 'howtobuildapp'
                        email 'rosetown30@gmail.com'
                    }
                }
            }
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

tasks.withType(Javadoc) {
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

artifacts {
    archives sourcesJar
    archives javadocJar
}